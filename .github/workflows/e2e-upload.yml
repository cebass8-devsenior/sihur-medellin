name: CI - E2E Upload

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Ensure full checkout
        run: |
          # actions/checkout may perform sparse or partial checkouts; force a full checkout to ensure all files are present
          git fetch --no-tags --prune origin main
          git checkout --force origin/main
          git reset --hard origin/main
          echo "after force checkout:"; ls -la

      - name: Start Postgres and run local server
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          set -euo pipefail
          set -x
          # Start Postgres
          docker run -d --name db -e POSTGRES_USER=sihur -e POSTGRES_PASSWORD=sihurpassword -e POSTGRES_DB=sihurdb -p 5432:5432 postgres:15

          # Wait for Postgres to be ready
          for i in {1..30}; do
            docker logs db || true
            if docker exec db pg_isready -U sihur -d sihurdb >/dev/null 2>&1; then echo "db ready" && break; fi
            echo "waiting for db..."; sleep 2
          done

          # Install and run the repository server in background.
          # Use an explicit inline DATABASE_URL value with bash -lc so the backgrounded process reliably
          # inherits the environment (avoids subtle env propagation edge cases).
          if [ -d server ]; then
            pushd server
            npm ci
            # start server with explicit DATABASE_URL and the secret-expanded JWT_SECRET
            bash -lc 'DATABASE_URL="postgresql://sihur:sihurpassword@localhost:5432/sihurdb" JWT_SECRET="$JWT_SECRET" node index.js > server.log 2>&1 & echo $! > /tmp/server.pid'
            # short pause then show initial server log for debugging
            sleep 1
            tail -n +1 server.log || true
            popd
          else
            echo "server folder not found; cannot start local server" >&2
            exit 1
          fi

      - name: Wait for backend
        run: |
          for i in {1..30}; do
            if curl -sSf http://localhost:3001/health >/dev/null; then echo "backend up" && break; fi
            echo "waiting..."; sleep 3;
          done

      - name: Install root deps
        run: npm install

      - name: Run E2E upload test
        env:
          CI: true
        run: npm run sihur:e2e-upload

      - name: Tear down
        if: always()
        run: |
          set -x
          docker ps -a || true
          docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | head -n 20 || true
          docker rm -f sihur_backend db || true
          docker network rm sihur_e2e_net || true
          # remove the built image
          docker rmi sihur-backend-ci || true
